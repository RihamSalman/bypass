objref connect_inh_inh, connect_ex_ex, connect_ex_inh, connect_inh_ex
objref connect_ip_ex, connect_ex_ees, connect_ip_ees

objref syn, target, stdp, presyn, postsyn, stdpmech, presyns, postsyns

objref connect_MNe_Aff, connect_MNe_IA, connect_MNe_Ib
objref connect_IAe_Ia, connect_Ibe_Ia, connect_sens1_EES
objref connect_IP0_sens1, connect_IP0_MNe, connect_IP0_IAe
objref connect_MNe_RCe, connect_IAe_RCe, connect_RCe_MNe

connect_MNe_Aff = new List()
connect_MNe_Ib = new List()
connect_MNe_IA = new List()
connect_IAe_Ia = new List()
connect_Ibe_Ia = new List()
connect_sens1_EES = new List()
connect_IP0_sens1 = new List()
connect_IP0_MNe = new List()
connect_IP0_IAe = new List()
connect_MNe_RCe = new List()
connect_IAe_RCe = new List()
connect_RCe_MNe = new List()

connect_inh_inh = new List()
connect_ex_ex = new List()
connect_ex_inh = new List()
connect_inh_ex = new List()
connect_ip_ex = new List()
connect_ex_ees = new List()
connect_ip_ees = new List()

presyns = new List()
postsyns = new List()
stdpmech = new List()


proc connection(){
    syn = $o1
    nc = pc.gid_connect($3, syn)
    r.uniform(1, 2)
    nc.weight = r.repick()
    r.uniform(1, 2)
    nc.delay = r.repick()
    $o2.append(nc)
}

proc connectionSTDP(){
    r.uniform(0.04, 0.07)
    syn = $o1
    nc = pc.gid_connect($4, syn)
    nc.weight = r.repick()
    r.uniform(1, 1.5)
    nc.delay = r.repick()
    stdp = new StdwaSA(0.5)
    $o2.append(nc)
    if($8 == 1){
        r.uniform(0.00025, 0.00028)
        nc.weight = r.repick()
        //nc.delay = 2
    }else if($8 == 2){
        r.uniform(0.005, 0.05)
        nc.weight = r.repick()
        nc.delay = 2
    }else if($8 == 3){
        r.uniform(0.00025, 0.00028)
        nc.weight = r.repick()
    }else if($8 == 4){
        stdp.aLTD = -0.001//inhibitory
        r.uniform(0.003, 0.03)
        nc.weight = r.repick()
    }else if($8 == 5){
        r.uniform(0.005, 0.05)
        nc.weight = r.repick()
        r.uniform(1, 2)
        nc.delay = r.repick()
    }else{nc.weight = 0.04}
    presyn = pc.gid_connect($4, stdp)
    presyn.weight = 1
    postsyn = pc.gid_connect($3, stdp)
    postsyn.weight = -1
    setpointer stdp.wsyn, $o2.object($o2.count-1).weight
    $o5.append(stdp)
    $o6.append(presyn)
    $o7.append(postsyn)
}

proc addConnection(){
    for (i=pc.id + $1; i < $2; i += pc.nhost){
        if (!pc.gid_exists(i)) { continue }
        target = pc.gid2cell(i) //target cell
        for j = 0, nsyn*$3-1 {
            if($8 == 0){
                r.uniform($4, $5)
                connectionSTDP(target.synlistex.object(j), $o6, i, r.repick(), stdpmech, presyns, postsyns, $7)
            }else if($8 == 1){
                r.uniform($4, $5)
                connectionSTDP(target.synlistinh.object(j), $o6, i, r.repick(), stdpmech, presyns, postsyns, $7)

            }else{
                r.uniform($4, $5)
                connection(target.synlistees.object(j), $o6, r.repick()) //add ees                 
            }
        }
    }
}

//last number is type of connection
//0 - excitatory
//1 - inhibitory
//3 - EES

addConnection(0, ncell, 27, (ncell*32+nIP+nMN+nAff+2*nInt+nRC), (ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens), connect_ex_ex, 0, 3)

//levels
for n =1, 5{
    addConnection(ncell*(n+5), ncell*(n+6), 27, ncell*(n-1), ncell*n, connect_ex_ex, 0, 0)
    addConnection(ncell*n, ncell*(n+1), 27, ncell*(n-1), ncell*n, connect_ex_ex, 1, 0)
    addConnection(ncell*n, ncell*(n+1), 27, ncell*(n+5), ncell*(n+6), connect_ex_ex, 3, 0)
    addConnection(ncell*n, ncell*(n+1), 27, ncell*(n+10), ncell*(n+11), connect_ex_ex, 3, 0)
    addConnection(ncell*(n+5), ncell*(n+6), 27, ncell*(n+10), ncell*(n+11), connect_ex_ex, 2, 0)
    addConnection(ncell*(n+5), ncell*(n+6), 27, ncell*n, ncell*(n+1), connect_ex_inh, 4, 1)
    addConnection(ncell*(n+10), ncell*(n+11), 27, ncell*n, ncell*(n+1), connect_ex_inh, 4, 1)
    addConnection(ncell*(n+10), ncell*(n+11), 27, ncell*(n+5), ncell*(n+6), connect_ex_ex, 2, 0)
    //addConnection(ncell*(i+10), ncell*(i+11), 27, ncell*(i+5), ncell*(i+6), connect_ex_ex, 0, 0)
}

addConnection(ncell*16, ncell*17, 27, 0, ncell, connect_ex_ex, 5, 0)
addConnection(ncell*21, ncell*22, 27, ncell*5, ncell*6, connect_ex_ex, 5, 0)
addConnection(ncell*22, ncell*23, 27, ncell*16, ncell*17, connect_ex_ex, 5, 0)
addConnection(ncell*27, ncell*28, 27, ncell*21, ncell*22, connect_ex_ex, 5, 0)

//generators
for n = 1, 4{
    addConnection(ncell*(n+16), ncell*(n+17), 27, ncell*n, ncell*(n+1), connect_ex_ex, 5, 0)
    addConnection(ncell*(n+16), ncell*(n+17), 27, ncell*(n+22), ncell*(n+23), connect_ex_ex, 2, 0)
    //addConnection(ncell*(n+16), ncell*(n+17), 27, ncell*(n+27), ncell*(n+28), connect_ex_inh, 4, 1)
    addConnection(ncell*(n+22), ncell*(n+23), 27, ncell*(n+16), ncell*(n+17), connect_ex_ex, 0, 0)
    addConnection(ncell*(n+22), ncell*(n+23), 27, ncell*(n+27), ncell*(n+28), connect_ex_inh, 4, 1)
    addConnection(ncell*(n+27), ncell*(n+28), 27, ncell*(n+22), ncell*(n+23), connect_ex_ex, 0, 0)
    //addConnection(ncell*(n+27), ncell*(n+28), 27, ncell*(n+16), ncell*(n+17), connect_ex_ex, 0, 0)
}

//inhibitory projections 
addConnection(ncell*29, ncell*30, 27, ncell*3, ncell*4, connect_ex_inh, 4, 1)
addConnection(ncell*24, ncell*25, 27, ncell*3, ncell*4, connect_ex_inh, 4, 1)
addConnection(ncell*18, ncell*19, 27, ncell*3, ncell*4, connect_ex_inh, 4, 1)
//addConnection(ncell*28, ncell*29, 27, ncell*3, ncell*4, connect_ex_inh, 4, 1)
addConnection(ncell*23, ncell*24, 27, ncell*3, ncell*4, connect_ex_inh, 4, 1)
addConnection(ncell*17, ncell*18, 27, ncell*2, ncell*3, connect_ex_inh, 4, 1)
addConnection(ncell*16, ncell*17, 27, ncell*1, ncell*2, connect_ex_inh, 4, 1)
addConnection(ncell*22, ncell*23, 27, ncell*1, ncell*2, connect_ex_inh, 4, 1)

//connection IP
for n = 0, 11 {
    addConnection(ncell*32+10*n, ncell*32+10*(n+1), 28, ncell*(n+16), ncell*(n+17), connect_ip_ex, 5, 0)
}

//connection MNE
for n = 0, 11 {
    addConnection(ncell*32+nIP, ncell*32+nIP+nMN/2, 12, ncell*32+10*n, ncell*32+10*(n+1), connect_IP0_MNe, 5, 0)
}            
addConnection(ncell*32+nIP, ncell*32+nIP+nMN, 10, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff, connect_MNe_Aff, 5, 0)

//connection Ia Afferent
addConnection(ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff, 50, ncells, ncells, connect_sens1_EES, 5, 3)
//addConnection(ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens+nAff/3, 20, ncell*32+nIP+nMN, ncell*32+nIP+nMN+nAff, connect_sens1_EES, 5, 3)

//connection sens
addConnection(ncell*32+nIP+nMN+nAff+2*nInt+nRC, ncell*32+nIP+nMN+nAff+2*nInt+nRC+nSens, 50, ncells, ncells, connect_sens1_EES, 5, 3)