"""
hh_moto_5ht_nestml - a motor neuron model in HH formalism with 5HT modulation
#############################################################################

Description
+++++++++++

hh_moto_5ht is an implementation of a spiking motor neuron using the Hodgkin-Huxley formalism according to [2]_. Basically this model is an implementation of the existing NEURON model [1]_.

The parameter that represents 5HT modulation is ``g_K_Ca_5ht``. When it equals 1, no modulation happens. An application of 5HT corresponds to its decrease. The default value for it is 0.6. This value was used in the Neuron simulator model. The range of this parameter is (0, 1] but you are free to play with any value.

Post-synaptic currents and spike detection are the same as in hh_psc_alpha.


References
++++++++++

.. [1] Muscle spindle feedback circuit by Moraud EM and Capogrosso M.
       https://senselab.med.yale.edu/ModelDB/showmodel.cshtml?model=189786

.. [2] Compartmental model of vertebrate motoneurons for Ca2+-dependent spiking and plateau potentials under pharmacological treatment.
       Booth V, Rinzel J, Kiehn O.
       http://refhub.elsevier.com/S0896-6273(16)00010-6/sref4

.. [3] Repository: https://github.com/research-team/hh-moto-5ht


See also
++++++++

hh_psc_alpha
"""
neuron hh_moto_5ht_muscle:

    input:
        inh_spikes pA <- inhibitory spike
        exc_spikes pA <- excitatory spike
        inh_spikes_time ms <- inhibitory spike
        exc_spikes_time ms <- excitatory spike
        I_stim pA <- continuous

    output:
        spike

    parameters:

        t_ref ms = 2.0 ms                # Refractory period

        g_Na nS = 5000.0 nS              # Sodium peak conductance
        g_L nS = 200.0 nS                # Leak conductance
        g_K_rect nS = 30000.0 nS         # Delayed Rectifier Potassium peak conductance
        g_Ca_N nS = 5000.0 nS
        g_Ca_L nS = 10.0 nS
        g_K_Ca nS = 30000.0 nS
        g_K_Ca_5ht real = 0.6            # modulation of K-Ca channels by 5HT. Its value 1.0 == no modulation.

        Ca_in_init mmol = 0.0001 mmol    # Initial inside Calcium concentration
        Ca_out mmol = 2.0 mmol           # Outside Calcium concentration. Remains constant during simulation.

        C_m pF = 200.0 pF                # Membrane capacitance
        E_Na mV = 50.0 mV
        E_K mV = -80.0 mV
        E_L mV = -70.0 mV
      
      # Nernst equation constants
        R_const real = 8.314472
        F_const real = 96485.34
        T_current real = 309.15          # 36 Celcius

        tau_syn_ex ms = 0.2 ms           # Rise time of the excitatory synaptic alpha function
        tau_syn_in ms = 2.0 ms           # Rise time of the inhibitory synaptic alpha function
        I_e pA = 0 pA                    # Constant current

        V_m_init mV = -65. mV

        hc_tau ms = 50.0 ms
        mc_tau ms = 15.0 ms
        p_tau ms = 400.0 ms

        alpha mmol/pA = 1E-5 mmol/pA
      
      ## muscle
      
      ##::module 1::
        k1 1/(mol*ms) = 3000 /(mol*ms)
        k2 1/ms = 3 /ms
        k3 1/(mol*ms) = 400 /(mol*ms)
        k4 1/ms = 1 /ms
        ## TODO debug inf here
        k5i 1/(mol*ms) = 4000 /(mol*ms)  #debugging 4e5
        k6i 1/ms = 150 /ms
        k 1/mol = 850 /mol
        SF_AM real = 5
        Rmax 1/ms = 10.0 /ms
        Umax 1/(mol*ms) = 2000 /(mol*ms)
        tau1 ms = 3 ms
        tau2 ms = 25 ms
        phi1 1/mm = 0.03 / mm
        phi2 real = 1.23
        phi3 1/mm = 0.01 /mm
        phi4 real = 1.08
        CS0 mol = 0.03 mol        #:[M]
        B0 mol = 0.00043 mol    #:[M]
        T0 mol = 0.00007 mol    # 70umol
      
      #::module 2::
        c1 real = 0.128
        c2 real = 0.093
        c3 ms = 61.206 ms
        c4 real = -13.116
        c5 real = 5.095

        alpha0 real = 2
        alpha1 real = 4.77
        alpha2 real = 400
        alpha3 real = 160
        beta real = 0.47
        gamma real = 0.001
      
      ## Ca transduction
      ## init values
        CaSR_init mol = 0.0025 mol       #:[M]
        CaSRCS_init mol = 0 mol           #:[M]
        Ca_init mol = 1e-10 mol           #:[M]
        CaB_init mol = 0 mol               #:[M]
        CaT_init mol = 0 mol               #:[M]
        AM_init mol = 0 mol               #:[M]
        At_init 1/ms = 0 /ms

      ## Hill eq
        a0 N = 2.35 N #            :[N]
        b0 mm/s = 24.35 mm/s #     :[mm*s-1]
        c0 N = -7.4 N #		       :[N]
        d0 mm/s = 30.3 mm/s #	   :[mm*s-1]
        p0 N = 23 N #		       :[N]
        g1 mm = -8	mm #		   :[mm]
        g2 mm = 21.4 mm #		   :[mm]
        xm_init mm = -8 mm #	   :[mm]
        xce_init mm = -8 mm #	   :[mm]
        Kse 1/mm = 0.4 /mm #	   :[mm-1]

    internals:
        RefractoryCounts integer = steps(t_ref) # refractory time in steps

    state:
        n_r integer = 0    # number of steps in the current refractory phase
        V_m mV = V_m_init    # Membrane potential
        Ca_in mmol = Ca_in_init    # Inside Calcium concentration

        Act_m real =    alpha_m(V_m_init) / ( alpha_m(V_m_init) + beta_m(V_m_init) )
        Act_h real = h_inf(V_m_init)
        Inact_n real = n_inf(V_m_init)
        Act_p real = p_inf(V_m_init)
        Act_mc real = mc_inf(V_m_init)
        Act_hc real = hc_inf(V_m_init)
    
        ## muscle 
        CaSR mol = CaSR_init 
        CaSRCS mol = CaSR_init
        Ca mol = Ca_init 
        CaB mol = CaB_init 
        CaT mol = CaT_init
        AM mol = AM_init
        At real = At_init
        k5 1/(mol*ms) = k5i
        k6 1/ms = k6i
        AMinf real = 0
        AMtau ms = 0 ms
        R mol/ms = 0 mol/ms
    
        ## Hill eq
        xce mm = xce_init
        xm mm = xm_init
        F N = 1e-5 N
        Fc N = 0 N
        tempI_ex pA = 0 pA
        tempConvR1 real = 0
        xseTemp mm = 0 mm
        xceTemp mm = 0 mm
        temp_diff_time mm/s = 0 mm/s

    equations:
        # synapses: alpha functions
        kernel I_syn_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
        kernel I_syn_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
        recordable inline I_syn_exc pA = convolve(I_syn_ex, exc_spikes)
        recordable inline I_syn_inh pA = convolve(I_syn_in, inh_spikes)

        inline E_Ca mV = ((1000.0 * R_const * T_current) / (2. * F_const)) * log10(Ca_out / Ca_in)

        inline I_Na pA = g_Na * Act_m * Act_m * Act_m * Act_h * ( V_m - E_Na )
        inline I_K pA = g_K_rect * Inact_n * Inact_n * Inact_n * Inact_n * ( V_m - E_K )
        inline I_L pA = g_L * ( V_m - E_L )
        inline I_Ca_N pA = g_Ca_N *    Act_mc * Act_mc * Act_hc * (V_m - E_Ca)
        inline I_Ca_L pA = g_Ca_L * Act_p * (V_m - E_Ca)
        inline I_K_Ca pA = g_K_Ca_5ht * g_K_Ca * ((Ca_in * Ca_in) / (Ca_in * Ca_in + 0.014 * 0.014)) * (V_m - E_K)

        V_m' =( -( I_Na + I_K + I_L + I_Ca_N + I_Ca_L + I_K_Ca ) + I_stim + I_e + I_syn_inh + I_syn_exc ) / C_m

        Inact_n' = (n_inf(V_m) - Inact_n) / n_tau(V_m)
        Act_m' = alpha_m(V_m) * (1. - Act_m) - beta_m(V_m) * Act_m
        Act_h' = (h_inf(V_m) - Act_h) / h_tau(V_m)
        Act_p' = (p_inf(V_m) - Act_p) / p_tau
        Act_mc' = (mc_inf(V_m) - Act_mc) / mc_tau
        Act_hc' = (hc_inf(V_m) - Act_hc) / hc_tau

        Ca_in'= (0.01 / s) * (-alpha * (I_Ca_N + I_Ca_L) - 4. * Ca_in)
    
        ## muscle
        ## CaSR*Rmax*
        ## kernel tempR = (1-exp(-(t-exc_spikes_time)/t1))*exp(-(t-exc_spikes_time)/t2)
        kernel kerR = exp(-t/tau2) * (1-exp(-t/tau1))
        recordable inline convR1 real = convolve(kerR, exc_spikes)
        
        #kernel tempR1' = -tempR1/tau2 
        #kernel tempR2' =  tempR2/tau1
        ## recordable inline R mol/ms = CaSR * Rmax # * convolve(tempR2, exc_spikes) * convolve(tempR1, exc_spikes)
        ## recordable inline R mol/ms = CaSR * Rmax * convolve(tempR1, exc_spikes)
        
        ## Ca transduction
        CaSR' = -k1*CS0*CaSR + (k1*CaSR+k2)*CaSRCS + U(Ca) - R
        CaSRCS' = k1*CS0*CaSR - (k1*CaSR+k2)*CaSRCS
        Ca' = + R - k3*B0*Ca + (k3*Ca+k4)*CaB - U(Ca) - k5*T0*Ca  # + (k5*Ca+k6)*CaT #  ## debugging
        CaB' = k3*B0*Ca - (k3*Ca+k4)*CaB
        CaT' = k5*T0*Ca - (k5*Ca+k6)*CaT
        AM' = (AMinf - AM)/AMtau
        At' = 0.0 /ms
        
        ## Hill eq
        xce' = diff_time(F, Fc)

    update:

        U_old mV = V_m
        ## muscle
        integrate_odes()
        tempI_ex = I_syn_exc
        ## TODO debug k5 and k6
        
        println("xm={xm};")
        k5 = phi(xm)*k5i ## TODO fixing k5i issue
        k6 = k6i/(1 + SF_AM*AM)
        AMinf = 0.5*(1+tanh(((CaT/T0)-c1)/c2))
        AMtau = c3/(cosh(((CaT/T0)-c4)/(2*c5)))
        tempConvR1  = convR1
        R = CaSR * Rmax * convR1
        ## As alpha = 2 =>
        At = AM**2

        #SOLVE state_hill METHOD cnexp
        xceTemp = xce
        println("call xce = {xceTemp};")
        xseTemp = xse(xm, xceTemp)
        println("xse = {xseTemp};")
        F = p0  * Kse * xseTemp
        Fc = p0 * g(xm) * At
        println("F= {F}, Fc={Fc}")
        temp_diff_time = diff_time_print(F, Fc)
        println("diff_time= {temp_diff_time}")

        # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
        if n_r > 0: # is refractory?
            n_r -= 1
        elif V_m > 0 mV and U_old > V_m: # threshold && maximum
            n_r = RefractoryCounts
            emit_spike()
    
    function h_inf(V_m mV) real:
        return 1. / (1. + exp((V_m + 65.) / 7.))
    
    function h_tau(V_m mV) ms:
        return (30. * ms) / (exp((V_m + 60.) / 15.) + exp(-(V_m + 60.) / 16.))
    
    function p_inf(V_m mV) real:
        return 1. / (1. + exp(-(V_m + 55.8) / 3.7))
    
    function mc_inf(V_m mV) real:
        return 1. / (1. + exp(-(V_m + 32.) / 5.))
    
    function hc_inf(V_m mV) real:
        return 1. / (1. + exp((V_m + 50.) / 5.))
    
    function n_inf(V_m mV) real:
        return 1. / (1. + exp(-(V_m + 38.) / 15.))
    
    function n_tau(V_m mV) ms:
        return (5. * ms) / (exp((V_m + 50.) / 40.) + exp(-(V_m + 50.) / 50.))
    
    function alpha_m(V_m mV) 1/ms:
        # println("V_m = {V_m};")
        return (0.4 * (V_m + 66.)) / mV / (1. - exp(-(V_m + 66.) / (5. mV))) / ms

    function beta_m(V_m mV) 1/ms:
        return (0.4 * (-(V_m + 32.))) / mV / (1. - exp((V_m + 32.) / (5. mV))) / ms

    function phi (x mm) real:

        println("phi x= {x};")
        res real = 0
        if (x <= -8):
            res = phi1*x + phi2
            ## print("phi = {res};")
            return res
        else:
            res = phi3*x + phi4
            ## print("phi = {res};")
            return res

    function U(x mol) real:

        U 1/(mol*ms) = 0 /(mol*ms)
        if (x >= 0):
            U = Umax*(x**2*k**2/(1+x*k+x**2*k**2))**2
            return U
        else:
            return U

    function xse(xse_xm mm, xse_xce mm) mm:

        print("xse_xm = {xse_xm};")
        print("xse_xce = {xse_xce};")
        d_xm mm = xse_xm - xm_init
        d_xce mm = xse_xce - xce_init
        d_se mm = d_xm - d_xce
        print("d_xm = {d_xm};")
        print("d_xce = {d_xce};")
        println("d_se  =  {d_se};")

        if (d_se <= 0):
            d_se = 0 mm
        return d_se

    function diff_time(diff_time_x N, diff_time_xc N) mm/s:

        #println("diff_time  x = {diff_time_x}, xc = {diff_time_xc};")
        res mm/s = 1e-3*1e5 mm/s
        zero_x N = 0 N
        if (diff_time_x == zero_x and diff_time_xc == zero_x):
            res = 0 mm/s
        else:
            if (diff_time_x <= diff_time_xc):
                res = 1e-3*(-b0*(diff_time_xc - diff_time_x))/(diff_time_x + a0 * diff_time_xc/p0)
            else:
                gain_length mm/s = (-d0*(diff_time_xc - diff_time_x))/(2* diff_time_xc - diff_time_x + c0 * diff_time_xc / p0)
                if (gain_length <= 0):
                    res = 1e-3*1e5 mm/s
                else:
                    res = 1e-3 * gain_length
        ##println("diff_time res = {res};")
        return res

    function diff_time_print(diff_time_x N, diff_time_xc N) mm/s:

        println("diff_time  x = {diff_time_x}, xc = {diff_time_xc};")
        res mm/s = 1e-3*1e5 mm/s
        zero_x N = 0 N
        if (diff_time_x == zero_x and diff_time_xc == zero_x):
            res = 0 mm/s
        else:
            if (diff_time_x <= diff_time_xc):
                res = 1e-3*(-b0*(diff_time_xc - diff_time_x))/(diff_time_x + a0 * diff_time_xc/p0)
            else:
                gain_length mm/s = (-d0*(diff_time_xc - diff_time_x))/(2* diff_time_xc - diff_time_x + c0 * diff_time_xc / p0)
                if (gain_length <= 0):
                    res = 1e-3*1e5 mm/s
                else:
                    res = 1e-3 * gain_length
        println("diff_time res = {res};")
        return res

    function g (g_x mm) real:
        g real = exp(-((g_x - g1) / g2)**2)
        return g
